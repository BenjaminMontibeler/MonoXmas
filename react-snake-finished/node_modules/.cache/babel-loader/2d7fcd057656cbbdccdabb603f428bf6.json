{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\nconst useAnimationFrame = (callback, speed) => {\n  const requestRef = useRef();\n  const previousTimeRef = useRef();\n\n  const animate = time => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n\n      if (deltaTime > speed) {\n        callback(deltaTime);\n        previousTimeRef.current = time;\n      }\n    } else {\n      previousTimeRef.current = time;\n    }\n\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []); // Make sure to only run this effect once\n\n  return requestRef;\n};\n\nexport default useAnimationFrame;","map":{"version":3,"sources":["C:/Users/alabak/Documents/GitHub/MonoXmas/react-snake-finished/src/useAnimationFrame.js"],"names":["useEffect","useRef","useAnimationFrame","callback","speed","requestRef","previousTimeRef","animate","time","current","undefined","deltaTime","requestAnimationFrame","cancelAnimationFrame"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC7C,QAAMC,UAAU,GAAGJ,MAAM,EAAzB;AACA,QAAMK,eAAe,GAAGL,MAAM,EAA9B;;AAEA,QAAMM,OAAO,GAAIC,IAAD,IAAU;AACxB,QAAIF,eAAe,CAACG,OAAhB,KAA4BC,SAAhC,EAA2C;AACzC,YAAMC,SAAS,GAAGH,IAAI,GAAGF,eAAe,CAACG,OAAzC;;AACA,UAAIE,SAAS,GAAGP,KAAhB,EAAuB;AACrBD,QAAAA,QAAQ,CAACQ,SAAD,CAAR;AACAL,QAAAA,eAAe,CAACG,OAAhB,GAA0BD,IAA1B;AACD;AACF,KAND,MAMO;AACLF,MAAAA,eAAe,CAACG,OAAhB,GAA0BD,IAA1B;AACD;;AAEDH,IAAAA,UAAU,CAACI,OAAX,GAAqBG,qBAAqB,CAACL,OAAD,CAA1C;AACD,GAZD;;AAcAP,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,UAAU,CAACI,OAAX,GAAqBG,qBAAqB,CAACL,OAAD,CAA1C;AACA,WAAO,MAAMM,oBAAoB,CAACR,UAAU,CAACI,OAAZ,CAAjC;AACD,GAHQ,EAGN,EAHM,CAAT,CAlB6C,CAqBrC;;AAER,SAAOJ,UAAP;AACD,CAxBD;;AA0BA,eAAeH,iBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nconst useAnimationFrame = (callback, speed) => {\r\n  const requestRef = useRef();\r\n  const previousTimeRef = useRef();\r\n\r\n  const animate = (time) => {\r\n    if (previousTimeRef.current !== undefined) {\r\n      const deltaTime = time - previousTimeRef.current;\r\n      if (deltaTime > speed) {\r\n        callback(deltaTime);\r\n        previousTimeRef.current = time;\r\n      }\r\n    } else {\r\n      previousTimeRef.current = time;\r\n    }\r\n\r\n    requestRef.current = requestAnimationFrame(animate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestRef.current = requestAnimationFrame(animate);\r\n    return () => cancelAnimationFrame(requestRef.current);\r\n  }, []); // Make sure to only run this effect once\r\n\r\n  return requestRef;\r\n};\r\n\r\nexport default useAnimationFrame;"]},"metadata":{},"sourceType":"module"}