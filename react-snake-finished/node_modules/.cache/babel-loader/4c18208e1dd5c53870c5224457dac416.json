{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bmontibeler\\\\Desktop\\\\react-snake-starter-files-master\\\\react-snake-starter-files-master\\\\react-snake-finished\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight); // Draw snake head\n\n    const [headX, headY] = snake[0];\n    const headImg = new Image();\n    headImg.src = \"../src/icons/santaClaus.png\";\n    context.drawImage(headImg, headX, headY, 1, 1); // Draw snake body\n\n    const bodyImg = new Image();\n    bodyImg.src = \"icons/gift.png\";\n    snake.slice(1).forEach(([x, y]) => context.drawImage(bodyImg, x, y, 1, 1)); // Draw apple\n\n    const [appleX, appleY] = apple;\n    const appleImg = new Image();\n    appleImg.src = \"icons/gift.png\";\n    context.drawImage(appleImg, appleX, appleY, 1, 1);\n  }, [snake, apple, gameOver]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bmontibeler/Desktop/react-snake-starter-files-master/react-snake-starter-files-master/react-snake-finished/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","gameLoop","endGame","moveSnake","keyCode","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","headX","headY","headImg","Image","src","drawImage","bodyImg","slice","forEach","x","y","appleX","appleY","appleImg","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  APPLE_START,\n  SCALE,\n  SPEED,\n  DIRECTIONS\n} from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({ keyCode }) =>\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () =>\n    apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\n      piece[0] < 0 ||\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\n      piece[1] < 0\n    )\n      return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n      setApple(newApple);\n      return true;\n    }\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    // Draw snake head\n    const [headX, headY] = snake[0];\n    const headImg = new Image();\n    headImg.src = \"../src/icons/santaClaus.png\";\n    context.drawImage(headImg, headX, headY, 1, 1);\n\n    // Draw snake body\n    const bodyImg = new Image();\n    bodyImg.src = \"icons/gift.png\";\n    snake.slice(1).forEach(([x, y]) => context.drawImage(bodyImg, x, y, 1, 1));\n\n    // Draw apple\n    const [appleX, appleY] = apple;\n    const appleImg = new Image();\n    appleImg.src = \"icons/gift.png\";\n    context.drawImage(appleImg, appleX, appleY, 1, 1);\n  }, [snake, apple, gameOver]);\n\n  return (\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n      <canvas\n        style={{ border: \"1px solid black\" }}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n      />\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}