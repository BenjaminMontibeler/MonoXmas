{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bmontibeler\\\\Documents\\\\GitHub\\\\MonoXmas\\\\react-snake-finished\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\nimport \"./css/style.css\";\nimport GameOverModal from \"./GameOverModal\";\nimport ReactDOM from 'react-dom';\nimport Snowfall from 'react-snowfall';\nimport useAnimationFrame from './useAnimationFrame';\nimport StartGameModal from \"./StartGameModal\"; // Import the StartGameModal component\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentDirection, setCurrentDirection] = useState(38);\n  const [showStartGameModal, setShowStartGameModal] = useState(true);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => {// ... (your existing moveSnake logic)\n  };\n\n  const createApple = () => apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {// ... (your existing checkCollision logic)\n  };\n\n  const checkAppleCollision = newSnake => {// ... (your existing checkAppleCollision logic)\n  };\n\n  const [rotationAngle, setRotationAngle] = useState(0);\n\n  const gameLoop = () => {// ... (your existing gameLoop logic)\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n    setScore(0);\n    canvasRef.current.focus();\n  };\n\n  const handleCloseStartGameModal = () => {\n    setShowStartGameModal(false);\n    startGame(); // Start the game when the modal is closed\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]); // ... (your existing useEffect logic)\n  }, [snake, apple, gameOver, rotationAngle]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: '#ffffff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Merry Christmas\"), /*#__PURE__*/React.createElement(Snowfall, {\n    snowflakeCount: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    className: \"game-canvas\",\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    tabIndex: \"0\",\n    style: {\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"c-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"actions--wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"m-btn btn--outline score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Score: \", score), showStartGameModal && /*#__PURE__*/React.createElement(StartGameModal, {\n    onStart: handleCloseStartGameModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"m-btn btn--primary\",\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Start Game\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bmontibeler/Documents/GitHub/MonoXmas/react-snake-finished/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","GameOverModal","ReactDOM","Snowfall","useAnimationFrame","StartGameModal","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","score","setScore","currentDirection","setCurrentDirection","showStartGameModal","setShowStartGameModal","gameLoop","endGame","moveSnake","keyCode","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","checkAppleCollision","newSnake","rotationAngle","setRotationAngle","startGame","current","focus","handleCloseStartGameModal","context","getContext","setTransform","clearRect","e","color","outline"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useInterval } from \"./useInterval\";\r\nimport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  APPLE_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS\r\n} from \"./constants\";\r\nimport \"./css/style.css\";\r\nimport GameOverModal from \"./GameOverModal\";\r\nimport ReactDOM from 'react-dom';\r\nimport Snowfall from 'react-snowfall';\r\nimport useAnimationFrame from './useAnimationFrame';\r\nimport StartGameModal from \"./StartGameModal\"; // Import the StartGameModal component\r\n\r\nconst App = () => {\r\n  const canvasRef = useRef();\r\n  const [snake, setSnake] = useState(SNAKE_START);\r\n  const [apple, setApple] = useState(APPLE_START);\r\n  const [dir, setDir] = useState([0, -1]);\r\n  const [speed, setSpeed] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [currentDirection, setCurrentDirection] = useState(38);\r\n  const [showStartGameModal, setShowStartGameModal] = useState(true);\r\n\r\n  useInterval(() => gameLoop(), speed);\r\n\r\n  const endGame = () => {\r\n    setSpeed(null);\r\n    setGameOver(true);\r\n  };\r\n\r\n  const moveSnake = ({ keyCode }) => {\r\n    // ... (your existing moveSnake logic)\r\n  };\r\n\r\n  const createApple = () =>\r\n    apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\r\n\r\n  const checkCollision = (piece, snk = snake) => {\r\n    // ... (your existing checkCollision logic)\r\n  };\r\n\r\n  const checkAppleCollision = newSnake => {\r\n    // ... (your existing checkAppleCollision logic)\r\n  };\r\n\r\n  const [rotationAngle, setRotationAngle] = useState(0);\r\n\r\n  const gameLoop = () => {\r\n    // ... (your existing gameLoop logic)\r\n  };\r\n\r\n  const startGame = () => {\r\n    setSnake(SNAKE_START);\r\n    setApple(APPLE_START);\r\n    setDir([0, -1]);\r\n    setSpeed(SPEED);\r\n    setGameOver(false);\r\n    setScore(0);\r\n    canvasRef.current.focus();\r\n  };\r\n\r\n  const handleCloseStartGameModal = () => {\r\n    setShowStartGameModal(false);\r\n    startGame(); // Start the game when the modal is closed\r\n  };\r\n\r\n  useEffect(() => {\r\n    const context = canvasRef.current.getContext(\"2d\");\r\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n    // ... (your existing useEffect logic)\r\n  }, [snake, apple, gameOver, rotationAngle]);\r\n\r\n  return (\r\n    <div className=\"container\" role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\r\n      <h1 style={{ color: '#ffffff' }}>Merry Christmas</h1>\r\n      <Snowfall snowflakeCount={100} />\r\n      <canvas\r\n        className=\"game-canvas\"\r\n        ref={canvasRef}\r\n        width={`${CANVAS_SIZE[0]}px`}\r\n        height={`${CANVAS_SIZE[1]}px`}\r\n        tabIndex=\"0\"\r\n        style={{ outline: 'none' }}\r\n      />\r\n      <div className=\"c-btn\">\r\n        {/* ... (your existing buttons) */}\r\n      </div>\r\n      <div className=\"actions--wrapper\">\r\n        <button className=\"m-btn btn--outline score\">Score: {score}</button>\r\n        {showStartGameModal && <StartGameModal onStart={handleCloseStartGameModal} />}\r\n        <button className=\"m-btn btn--primary\" onClick={startGame}>Start Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}